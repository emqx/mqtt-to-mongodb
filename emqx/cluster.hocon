bridges {
  mongodb_single {
    "save-truck-data" {
      collection = "truck_data"
      database = "iot_data"
      enable = true
      mongo_type = "single"
      password = "public"
      payload_template = "{\n  \"car_id\": \"${payload.car_id}\",\n  \"display_name\":\"${payload.display_name}\",\n  \"model\":\"${payload.model}\",\n  \"latitude\": ${payload.latitude},\n  \"longitude\": ${payload.longitude},\n  \"speed\": ${payload.speed},\n  \"distance\": ${payload.distance},\n  \"direction\": ${payload.direction},\n  \"fuel_consumption\": ${payload.fuel_consumption},\n  \"shift_state\": \"${payload.shift_state}\",\n  \"state\": \"${payload.state}\",\n  \"power\": ${payload.power},\n  \"windows_open\": ${payload.windows_open},\n  \"doors_open\": ${payload.doors_open},\n  \"inside_temp\": ${payload.inside_temp},\n  \"outside_temp\": ${payload.outside_temp},\n  \"timestamp\": ${mongo_ts}\n}"
      pool_size = 8
      resource_opts {
        auto_restart_interval = "60s"
        batch_size = 1
        batch_time = "0ms"
        health_check_interval = "5s"
        inflight_window = 100
        max_buffer_bytes = "256MB"
        query_mode = "async"
        request_timeout = "15s"
        start_after_created = "true"
        start_timeout = "5s"
        worker_pool_size = 16
      }
      server = "mongo:27017"
      srv_record = false
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = "5s"
        reuse_sessions = true
        secure_renegotiate = true
        verify = "verify_peer"
        versions = ["tlsv1.3", "tlsv1.2", "tlsv1.1", "tlsv1"]
      }
      topology {
        heartbeat_frequency_ms = "200s"
        max_overflow = 1
        pool_size = 8
      }
      username = "admin"
      w_mode = "unsafe"
    }
  }
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = "10s"
  rules {
    "save-truck-data" {
      actions = ["mongodb_single:save-truck-data"]
      description = ""
      metadata {created_at = 1689564690831}
      sql = "SELECT\n  *,  json_decode(payload) as payload, \n  mongo_date(payload.timestamp) as mongo_ts\nFROM\n  \"mqttx/simulate/#\""
    }
  }
}
